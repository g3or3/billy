{"ast":null,"code":"var postcss = require('postcss');\n\nvar Tokenizer = require('css-selector-tokenizer');\n\nfunction normalizeNodeArray(nodes) {\n  var array = [];\n  nodes.forEach(function (x) {\n    if (Array.isArray(x)) {\n      normalizeNodeArray(x).forEach(function (item) {\n        array.push(item);\n      });\n    } else if (x) {\n      array.push(x);\n    }\n  });\n\n  if (array.length > 0 && array[array.length - 1].type === 'spacing') {\n    array.pop();\n  }\n\n  return array;\n}\n\nfunction localizeNode(node, context) {\n  if (context.ignoreNextSpacing && node.type !== 'spacing') {\n    throw new Error('Missing whitespace after :' + context.ignoreNextSpacing);\n  }\n\n  if (context.enforceNoSpacing && node.type === 'spacing') {\n    throw new Error('Missing whitespace before :' + context.enforceNoSpacing);\n  }\n\n  var newNodes;\n\n  switch (node.type) {\n    case 'selectors':\n      var resultingGlobal;\n      context.hasPureGlobals = false;\n      newNodes = node.nodes.map(function (n) {\n        var nContext = {\n          global: context.global,\n          lastWasSpacing: true,\n          hasLocals: false,\n          explicit: false\n        };\n        n = localizeNode(n, nContext);\n\n        if (typeof resultingGlobal === 'undefined') {\n          resultingGlobal = nContext.global;\n        } else if (resultingGlobal !== nContext.global) {\n          throw new Error('Inconsistent rule global/local result in rule \"' + Tokenizer.stringify(node) + '\" (multiple selectors must result in the same mode for the rule)');\n        }\n\n        if (!nContext.hasLocals) {\n          context.hasPureGlobals = true;\n        }\n\n        return n;\n      });\n      context.global = resultingGlobal;\n      node = Object.create(node);\n      node.nodes = normalizeNodeArray(newNodes);\n      break;\n\n    case 'selector':\n      newNodes = node.nodes.map(function (n) {\n        return localizeNode(n, context);\n      });\n      node = Object.create(node);\n      node.nodes = normalizeNodeArray(newNodes);\n      break;\n\n    case 'spacing':\n      if (context.ignoreNextSpacing) {\n        context.ignoreNextSpacing = false;\n        context.lastWasSpacing = false;\n        context.enforceNoSpacing = false;\n        return null;\n      }\n\n      context.lastWasSpacing = true;\n      return node;\n\n    case 'pseudo-class':\n      if (node.name === 'local' || node.name === 'global') {\n        if (context.inside) {\n          throw new Error('A :' + node.name + ' is not allowed inside of a :' + context.inside + '(...)');\n        }\n\n        context.ignoreNextSpacing = context.lastWasSpacing ? node.name : false;\n        context.enforceNoSpacing = context.lastWasSpacing ? false : node.name;\n        context.global = node.name === 'global';\n        context.explicit = true;\n        return null;\n      }\n\n      break;\n\n    case 'nested-pseudo-class':\n      var subContext;\n\n      if (node.name === 'local' || node.name === 'global') {\n        if (context.inside) {\n          throw new Error('A :' + node.name + '(...) is not allowed inside of a :' + context.inside + '(...)');\n        }\n\n        subContext = {\n          global: node.name === 'global',\n          inside: node.name,\n          hasLocals: false,\n          explicit: true\n        };\n        node = node.nodes.map(function (n) {\n          return localizeNode(n, subContext);\n        }); // don't leak spacing\n\n        node[0].before = undefined;\n        node[node.length - 1].after = undefined;\n      } else {\n        subContext = {\n          global: context.global,\n          inside: context.inside,\n          lastWasSpacing: true,\n          hasLocals: false,\n          explicit: context.explicit\n        };\n        newNodes = node.nodes.map(function (n) {\n          return localizeNode(n, subContext);\n        });\n        node = Object.create(node);\n        node.nodes = normalizeNodeArray(newNodes);\n      }\n\n      if (subContext.hasLocals) {\n        context.hasLocals = true;\n      }\n\n      break;\n\n    case 'id':\n    case 'class':\n      if (!context.global) {\n        node = {\n          type: 'nested-pseudo-class',\n          name: 'local',\n          nodes: [node]\n        };\n        context.hasLocals = true;\n      }\n\n      break;\n  } // reset context\n\n\n  context.lastWasSpacing = false;\n  context.ignoreNextSpacing = false;\n  context.enforceNoSpacing = false;\n  return node;\n}\n\nfunction localizeDeclNode(node, context) {\n  var newNode;\n\n  switch (node.type) {\n    case 'item':\n      if (context.localizeNextItem) {\n        newNode = Object.create(node);\n        newNode.name = ':local(' + newNode.name + ')';\n        context.localizeNextItem = false;\n        return newNode;\n      }\n\n      break;\n\n    case 'nested-item':\n      var newNodes = node.nodes.map(function (n) {\n        return localizeDeclValue(n, context);\n      });\n      node = Object.create(node);\n      node.nodes = newNodes;\n      break;\n\n    case 'url':\n      if (context.options && context.options.rewriteUrl) {\n        newNode = Object.create(node);\n        newNode.url = context.options.rewriteUrl(context.global, node.url);\n        return newNode;\n      }\n\n      break;\n  }\n\n  return node;\n}\n\nfunction localizeDeclValue(valueNode, context) {\n  var newValueNode = Object.create(valueNode);\n  newValueNode.nodes = valueNode.nodes.map(function (node) {\n    return localizeDeclNode(node, context);\n  });\n  return newValueNode;\n}\n\nfunction localizeAnimationShorthandDeclValueNodes(nodes, context) {\n  var validIdent = validIdent = /^-?[_a-z][_a-z0-9-]*$/i;\n  /*\n  The spec defines some keywords that you can use to describe properties such as the timing\n  function. These are still valid animation names, so as long as there is a property that accepts\n  a keyword, it is given priority. Only when all the properties that can take a keyword are\n  exhausted can the animation name be set to the keyword. I.e.\n   animation: infinite infinite;\n   The animation will repeat an infinite number of times from the first argument, and will have an\n  animation name of infinite from the second.\n  */\n\n  var animationKeywords = {\n    '$alternate': 1,\n    '$alternate-reverse': 1,\n    '$backwards': 1,\n    '$both': 1,\n    '$ease': 1,\n    '$ease-in': 1,\n    '$ease-in-out': 1,\n    '$ease-out': 1,\n    '$forwards': 1,\n    '$infinite': 1,\n    '$linear': 1,\n    '$none': Infinity,\n    // No matter how many times you write none, it will never be an animation name\n    '$normal': 1,\n    '$paused': 1,\n    '$reverse': 1,\n    '$running': 1,\n    '$step-end': 1,\n    '$step-start': 1,\n    '$initial': Infinity,\n    '$inherit': Infinity,\n    '$unset': Infinity\n  };\n  var didParseAnimationName = false;\n  var parsedAnimationKeywords = {};\n  return nodes.map(function (valueNode) {\n    var value = valueNode.type === 'item' ? valueNode.name.toLowerCase() : null;\n    var shouldParseAnimationName = false;\n\n    if (!didParseAnimationName && value && validIdent.test(value)) {\n      if ('$' + value in animationKeywords) {\n        parsedAnimationKeywords['$' + value] = '$' + value in parsedAnimationKeywords ? parsedAnimationKeywords['$' + value] + 1 : 0;\n        shouldParseAnimationName = parsedAnimationKeywords['$' + value] >= animationKeywords['$' + value];\n      } else {\n        shouldParseAnimationName = true;\n      }\n    }\n\n    var subContext = {\n      options: context.options,\n      global: context.global,\n      localizeNextItem: shouldParseAnimationName && !context.global\n    };\n    return localizeDeclNode(valueNode, subContext);\n  });\n}\n\nfunction localizeAnimationShorthandDeclValues(valuesNode, decl, context) {\n  var newValuesNode = Object.create(valuesNode);\n  newValuesNode.nodes = valuesNode.nodes.map(function (valueNode, index) {\n    var newValueNode = Object.create(valueNode);\n    newValueNode.nodes = localizeAnimationShorthandDeclValueNodes(valueNode.nodes, context);\n    return newValueNode;\n  });\n  decl.value = Tokenizer.stringifyValues(newValuesNode);\n}\n\nfunction localizeDeclValues(localize, valuesNode, decl, context) {\n  var newValuesNode = Object.create(valuesNode);\n  newValuesNode.nodes = valuesNode.nodes.map(function (valueNode) {\n    var subContext = {\n      options: context.options,\n      global: context.global,\n      localizeNextItem: localize && !context.global\n    };\n    return localizeDeclValue(valueNode, subContext);\n  });\n  decl.value = Tokenizer.stringifyValues(newValuesNode);\n}\n\nfunction localizeDecl(decl, context) {\n  var valuesNode = Tokenizer.parseValues(decl.value);\n  var isAnimation = /animation?$/.test(decl.prop);\n  if (isAnimation) return localizeAnimationShorthandDeclValues(valuesNode, decl, context);\n  var isAnimationName = /animation(-name)?$/.test(decl.prop);\n  if (isAnimationName) return localizeDeclValues(true, valuesNode, decl, context);\n  return localizeDeclValues(false, valuesNode, decl, context);\n}\n\nmodule.exports = postcss.plugin('postcss-modules-local-by-default', function (options) {\n  if (typeof options !== 'object') {\n    options = {}; // If options is undefined or not an object the plugin fails\n  }\n\n  if (options && options.mode) {\n    if (options.mode !== 'global' && options.mode !== 'local' && options.mode !== 'pure') {\n      throw new Error('options.mode must be either \"global\", \"local\" or \"pure\" (default \"local\")');\n    }\n  }\n\n  var pureMode = options && options.mode === 'pure';\n  var globalMode = options && options.mode === 'global';\n  return function (css) {\n    css.walkAtRules(function (atrule) {\n      if (/keyframes$/.test(atrule.name)) {\n        var globalMatch = /^\\s*:global\\s*\\((.+)\\)\\s*$/.exec(atrule.params);\n        var localMatch = /^\\s*:local\\s*\\((.+)\\)\\s*$/.exec(atrule.params);\n        var globalKeyframes = globalMode;\n\n        if (globalMatch) {\n          if (pureMode) {\n            throw atrule.error('@keyframes :global(...) is not allowed in pure mode');\n          }\n\n          atrule.params = globalMatch[1];\n          globalKeyframes = true;\n        } else if (localMatch) {\n          atrule.params = localMatch[0];\n          globalKeyframes = false;\n        } else if (!globalMode) {\n          atrule.params = ':local(' + atrule.params + ')';\n        }\n\n        atrule.walkDecls(function (decl) {\n          localizeDecl(decl, {\n            options: options,\n            global: globalKeyframes\n          });\n        });\n      } else if (atrule.nodes) {\n        atrule.nodes.forEach(function (decl) {\n          if (decl.type === 'decl') {\n            localizeDecl(decl, {\n              options: options,\n              global: globalMode\n            });\n          }\n        });\n      }\n    });\n    css.walkRules(function (rule) {\n      if (rule.parent.type === 'atrule' && /keyframes$/.test(rule.parent.name)) {\n        // ignore keyframe rules\n        return;\n      }\n\n      var selector = Tokenizer.parse(rule.selector);\n      var context = {\n        options: options,\n        global: globalMode,\n        hasPureGlobals: false\n      };\n      var newSelector;\n\n      try {\n        newSelector = localizeNode(selector, context);\n      } catch (e) {\n        throw rule.error(e.message);\n      }\n\n      if (pureMode && context.hasPureGlobals) {\n        throw rule.error('Selector \"' + Tokenizer.stringify(selector) + '\" is not pure ' + '(pure selectors must contain at least one local class or id)');\n      } // Less-syntax mixins parse as rules with no nodes\n\n\n      if (rule.nodes) {\n        rule.nodes.forEach(function (decl) {\n          localizeDecl(decl, context);\n        });\n      }\n\n      rule.selector = Tokenizer.stringify(newSelector);\n    });\n  };\n});","map":{"version":3,"sources":["/Users/George/Documents/billy/node_modules/css-modules-loader-core/node_modules/postcss-modules-local-by-default/index.js"],"names":["postcss","require","Tokenizer","normalizeNodeArray","nodes","array","forEach","x","Array","isArray","item","push","length","type","pop","localizeNode","node","context","ignoreNextSpacing","Error","enforceNoSpacing","newNodes","resultingGlobal","hasPureGlobals","map","n","nContext","global","lastWasSpacing","hasLocals","explicit","stringify","Object","create","name","inside","subContext","before","undefined","after","localizeDeclNode","newNode","localizeNextItem","localizeDeclValue","options","rewriteUrl","url","valueNode","newValueNode","localizeAnimationShorthandDeclValueNodes","validIdent","animationKeywords","Infinity","didParseAnimationName","parsedAnimationKeywords","value","toLowerCase","shouldParseAnimationName","test","localizeAnimationShorthandDeclValues","valuesNode","decl","newValuesNode","index","stringifyValues","localizeDeclValues","localize","localizeDecl","parseValues","isAnimation","prop","isAnimationName","module","exports","plugin","mode","pureMode","globalMode","css","walkAtRules","atrule","globalMatch","exec","params","localMatch","globalKeyframes","error","walkDecls","walkRules","rule","parent","selector","parse","newSelector","e","message"],"mappings":"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","sourcesContent":["var postcss = require('postcss');\nvar Tokenizer = require('css-selector-tokenizer');\n\nfunction normalizeNodeArray(nodes) {\n  var array = [];\n  nodes.forEach(function(x) {\n    if(Array.isArray(x)) {\n      normalizeNodeArray(x).forEach(function(item) {\n        array.push(item);\n      });\n    } else if(x) {\n      array.push(x);\n    }\n  });\n  if(array.length > 0 && array[array.length - 1].type === 'spacing') {\n    array.pop();\n  }\n  return array;\n}\n\nfunction localizeNode(node, context) {\n  if(context.ignoreNextSpacing && node.type !== 'spacing') {\n    throw new Error('Missing whitespace after :' + context.ignoreNextSpacing);\n  }\n  if(context.enforceNoSpacing && node.type === 'spacing') {\n    throw new Error('Missing whitespace before :' + context.enforceNoSpacing);\n  }\n\n  var newNodes;\n  switch(node.type) {\n    case 'selectors':\n      var resultingGlobal;\n      context.hasPureGlobals = false;\n      newNodes = node.nodes.map(function(n) {\n        var nContext = {\n          global: context.global,\n          lastWasSpacing: true,\n          hasLocals: false,\n          explicit: false\n        };\n        n = localizeNode(n, nContext);\n        if(typeof resultingGlobal === 'undefined') {\n          resultingGlobal = nContext.global;\n        } else if(resultingGlobal !== nContext.global) {\n          throw new Error('Inconsistent rule global/local result in rule \"' +\n            Tokenizer.stringify(node) + '\" (multiple selectors must result in the same mode for the rule)');\n        }\n        if(!nContext.hasLocals) {\n          context.hasPureGlobals = true;\n        }\n        return n;\n      });\n      context.global = resultingGlobal;\n      node = Object.create(node);\n      node.nodes = normalizeNodeArray(newNodes);\n      break;\n\n    case 'selector':\n      newNodes = node.nodes.map(function(n) {\n        return localizeNode(n, context);\n      });\n      node = Object.create(node);\n      node.nodes = normalizeNodeArray(newNodes);\n      break;\n\n    case 'spacing':\n      if(context.ignoreNextSpacing) {\n        context.ignoreNextSpacing = false;\n        context.lastWasSpacing = false;\n        context.enforceNoSpacing = false;\n        return null;\n      }\n      context.lastWasSpacing = true;\n      return node;\n\n    case 'pseudo-class':\n      if(node.name === 'local' || node.name === 'global') {\n        if(context.inside) {\n          throw new Error('A :' + node.name + ' is not allowed inside of a :' + context.inside + '(...)');\n        }\n        context.ignoreNextSpacing = context.lastWasSpacing ? node.name : false;\n        context.enforceNoSpacing = context.lastWasSpacing ? false : node.name;\n        context.global = (node.name === 'global');\n        context.explicit = true;\n        return null;\n      }\n      break;\n\n    case 'nested-pseudo-class':\n      var subContext;\n      if(node.name === 'local' || node.name === 'global') {\n        if(context.inside) {\n          throw new Error('A :' + node.name + '(...) is not allowed inside of a :' + context.inside + '(...)');\n        }\n        subContext = {\n          global: (node.name === 'global'),\n          inside: node.name,\n          hasLocals: false,\n          explicit: true\n        };\n        node = node.nodes.map(function(n) {\n          return localizeNode(n, subContext);\n        });\n        // don't leak spacing\n        node[0].before = undefined;\n        node[node.length - 1].after = undefined;\n      } else {\n        subContext = {\n          global: context.global,\n          inside: context.inside,\n          lastWasSpacing: true,\n          hasLocals: false,\n          explicit: context.explicit\n        };\n        newNodes = node.nodes.map(function(n) {\n          return localizeNode(n, subContext);\n        });\n        node = Object.create(node);\n        node.nodes = normalizeNodeArray(newNodes);\n      }\n      if(subContext.hasLocals) {\n        context.hasLocals = true;\n      }\n      break;\n\n    case 'id':\n    case 'class':\n      if(!context.global) {\n        node = {\n          type: 'nested-pseudo-class',\n          name: 'local',\n          nodes: [node]\n        };\n        context.hasLocals = true;\n      }\n      break;\n  }\n\n  // reset context\n  context.lastWasSpacing = false;\n  context.ignoreNextSpacing = false;\n  context.enforceNoSpacing = false;\n  return node;\n}\n\nfunction localizeDeclNode(node, context) {\n  var newNode;\n  switch(node.type) {\n    case 'item':\n      if(context.localizeNextItem) {\n        newNode = Object.create(node);\n        newNode.name = ':local(' + newNode.name + ')';\n        context.localizeNextItem = false;\n        return newNode;\n      }\n      break;\n\n    case 'nested-item':\n      var newNodes = node.nodes.map(function(n) {\n        return localizeDeclValue(n, context);\n      });\n      node = Object.create(node);\n      node.nodes = newNodes;\n      break;\n\n    case 'url':\n      if(context.options && context.options.rewriteUrl) {\n        newNode = Object.create(node);\n        newNode.url = context.options.rewriteUrl(context.global, node.url);\n        return newNode;\n      }\n      break;\n  }\n  return node;\n}\n\nfunction localizeDeclValue(valueNode, context) {\n  var newValueNode = Object.create(valueNode);\n  newValueNode.nodes = valueNode.nodes.map(function(node) {\n    return localizeDeclNode(node, context);\n  });\n  return newValueNode;\n}\n\nfunction localizeAnimationShorthandDeclValueNodes(nodes, context) {\n  var validIdent = validIdent = /^-?[_a-z][_a-z0-9-]*$/i;\n\n  /*\n  The spec defines some keywords that you can use to describe properties such as the timing\n  function. These are still valid animation names, so as long as there is a property that accepts\n  a keyword, it is given priority. Only when all the properties that can take a keyword are\n  exhausted can the animation name be set to the keyword. I.e.\n\n  animation: infinite infinite;\n\n  The animation will repeat an infinite number of times from the first argument, and will have an\n  animation name of infinite from the second.\n  */\n  var animationKeywords = {\n    '$alternate': 1,\n    '$alternate-reverse': 1,\n    '$backwards': 1,\n    '$both': 1,\n    '$ease': 1,\n    '$ease-in': 1,\n    '$ease-in-out': 1,\n    '$ease-out': 1,\n    '$forwards': 1,\n    '$infinite': 1,\n    '$linear': 1,\n    '$none': Infinity, // No matter how many times you write none, it will never be an animation name\n    '$normal': 1,\n    '$paused': 1,\n    '$reverse': 1,\n    '$running': 1,\n    '$step-end': 1,\n    '$step-start': 1,\n    '$initial': Infinity,\n    '$inherit': Infinity,\n    '$unset': Infinity,\n  };\n\n  var didParseAnimationName = false;\n  var parsedAnimationKeywords = {};\n  return nodes.map(function(valueNode) {\n    var value = valueNode.type === 'item'\n      ? valueNode.name.toLowerCase()\n      : null;\n\n    var shouldParseAnimationName = false;\n\n    if (!didParseAnimationName && value && validIdent.test(value)) {\n      if ('$' + value in animationKeywords) {\n        parsedAnimationKeywords['$' + value] = ('$' + value in parsedAnimationKeywords)\n          ? (parsedAnimationKeywords['$' + value] + 1)\n          : 0;\n\n        shouldParseAnimationName = (parsedAnimationKeywords['$' + value] >= animationKeywords['$' + value]);\n      } else {\n        shouldParseAnimationName = true;\n      }\n    }\n\n    var subContext = {\n      options: context.options,\n      global: context.global,\n      localizeNextItem: shouldParseAnimationName && !context.global\n    };\n    return localizeDeclNode(valueNode, subContext);\n  });\n}\n\nfunction localizeAnimationShorthandDeclValues(valuesNode, decl, context) {\n  var newValuesNode = Object.create(valuesNode);\n  newValuesNode.nodes = valuesNode.nodes.map(function(valueNode, index) {\n    var newValueNode = Object.create(valueNode);\n    newValueNode.nodes = localizeAnimationShorthandDeclValueNodes(valueNode.nodes, context);\n    return newValueNode;\n  });\n  decl.value = Tokenizer.stringifyValues(newValuesNode);\n}\n\nfunction localizeDeclValues(localize, valuesNode, decl, context) {\n  var newValuesNode = Object.create(valuesNode);\n  newValuesNode.nodes = valuesNode.nodes.map(function(valueNode) {\n    var subContext = {\n      options: context.options,\n      global: context.global,\n      localizeNextItem: localize && !context.global\n    };\n    return localizeDeclValue(valueNode, subContext);\n  });\n  decl.value = Tokenizer.stringifyValues(newValuesNode);\n}\n\nfunction localizeDecl(decl, context) {\n  var valuesNode = Tokenizer.parseValues(decl.value);\n\n  var isAnimation = /animation?$/.test(decl.prop);\n  if (isAnimation) return localizeAnimationShorthandDeclValues(valuesNode, decl, context);\n\n  var isAnimationName = /animation(-name)?$/.test(decl.prop);\n  if (isAnimationName) return localizeDeclValues(true, valuesNode, decl, context);\n\n  return localizeDeclValues(false, valuesNode, decl, context);\n}\n\nmodule.exports = postcss.plugin('postcss-modules-local-by-default', function (options) {\n  if (typeof options !== 'object') {\n    options = {}; // If options is undefined or not an object the plugin fails\n  }\n  if(options && options.mode) {\n    if(options.mode !== 'global' && options.mode !== 'local' && options.mode !== 'pure') {\n      throw new Error('options.mode must be either \"global\", \"local\" or \"pure\" (default \"local\")');\n    }\n  }\n  var pureMode = options && options.mode === 'pure';\n  var globalMode = options && options.mode === 'global';\n  return function(css) {\n    css.walkAtRules(function(atrule) {\n      if(/keyframes$/.test(atrule.name)) {\n        var globalMatch = /^\\s*:global\\s*\\((.+)\\)\\s*$/.exec(atrule.params);\n        var localMatch = /^\\s*:local\\s*\\((.+)\\)\\s*$/.exec(atrule.params);\n        var globalKeyframes = globalMode;\n        if(globalMatch) {\n          if(pureMode) {\n            throw atrule.error('@keyframes :global(...) is not allowed in pure mode');\n          }\n          atrule.params = globalMatch[1];\n          globalKeyframes = true;\n        } else if(localMatch) {\n          atrule.params = localMatch[0];\n          globalKeyframes = false;\n        } else if(!globalMode) {\n          atrule.params = ':local(' + atrule.params + ')';\n        }\n        atrule.walkDecls(function(decl) {\n          localizeDecl(decl, {\n            options: options,\n            global: globalKeyframes\n          });\n        });\n      } else if(atrule.nodes) {\n        atrule.nodes.forEach(function(decl) {\n          if(decl.type === 'decl') {\n            localizeDecl(decl, {\n              options: options,\n              global: globalMode\n            });\n          }\n        });\n      }\n    });\n    css.walkRules(function(rule) {\n      if(rule.parent.type === 'atrule' && /keyframes$/.test(rule.parent.name)) {\n        // ignore keyframe rules\n        return;\n      }\n      var selector = Tokenizer.parse(rule.selector);\n      var context = {\n        options: options,\n        global: globalMode,\n        hasPureGlobals: false\n      };\n      var newSelector;\n      try {\n        newSelector = localizeNode(selector, context);\n      } catch(e) {\n        throw rule.error(e.message);\n      }\n      if(pureMode && context.hasPureGlobals) {\n        throw rule.error('Selector \"' + Tokenizer.stringify(selector) + '\" is not pure ' +\n          '(pure selectors must contain at least one local class or id)');\n      }\n      // Less-syntax mixins parse as rules with no nodes\n      if (rule.nodes) {\n        rule.nodes.forEach(function(decl) {\n          localizeDecl(decl, context);\n        });\n      }\n      rule.selector = Tokenizer.stringify(newSelector);\n    });\n  };\n});\n"]},"metadata":{},"sourceType":"script"}