{"ast":null,"code":"\"use strict\";\n\nvar Parser = require(\"fastparse\");\n\nvar uniRegexp = require(\"./uni-regexp\");\n\nfunction unescape(str) {\n  return str.replace(/\\\\(.)/g, \"$1\");\n}\n\nfunction commentMatch(match, content) {\n  this.selector.nodes.push({\n    type: \"comment\",\n    content: content\n  });\n}\n\nfunction typeMatch(type) {\n  return function (match, name) {\n    this.selector.nodes.push({\n      type: type,\n      name: unescape(name)\n    });\n  };\n}\n\nfunction pseudoClassStartMatch(match, name) {\n  var newToken = {\n    type: \"pseudo-class\",\n    name: unescape(name),\n    content: \"\"\n  };\n  this.selector.nodes.push(newToken);\n  this.token = newToken;\n  this.brackets = 1;\n  return \"inBrackets\";\n}\n\nfunction nestedPseudoClassStartMatch(match, name, after) {\n  var newSelector = {\n    type: \"selector\",\n    nodes: []\n  };\n  var newToken = {\n    type: \"nested-pseudo-class\",\n    name: unescape(name),\n    nodes: [newSelector]\n  };\n\n  if (after) {\n    newSelector.before = after;\n  }\n\n  this.selector.nodes.push(newToken);\n  this.stack.push(this.root);\n  this.root = newToken;\n  this.selector = newSelector;\n}\n\nfunction nestedEnd(match, before) {\n  if (this.stack.length > 0) {\n    if (before) {\n      this.selector.after = before;\n    }\n\n    this.root = this.stack.pop();\n    this.selector = this.root.nodes[this.root.nodes.length - 1];\n  } else {\n    this.selector.nodes.push({\n      type: \"invalid\",\n      value: match\n    });\n  }\n}\n\nfunction operatorMatch(match, before, operator, after) {\n  var token = {\n    type: \"operator\",\n    operator: operator\n  };\n\n  if (before) {\n    token.before = before;\n  }\n\n  if (after) {\n    token.after = after;\n  }\n\n  this.selector.nodes.push(token);\n}\n\nfunction spacingMatch(match) {\n  this.selector.nodes.push({\n    type: \"spacing\",\n    value: match\n  });\n}\n\nfunction elementMatch(match, namespace, name) {\n  var newToken = {\n    type: \"element\",\n    name: unescape(name)\n  };\n\n  if (namespace) {\n    newToken.namespace = unescape(namespace.substr(0, namespace.length - 1));\n  }\n\n  this.selector.nodes.push(newToken);\n}\n\nfunction universalMatch(match, namespace) {\n  var newToken = {\n    type: \"universal\"\n  };\n\n  if (namespace) {\n    newToken.namespace = unescape(namespace.substr(0, namespace.length - 1));\n  }\n\n  this.selector.nodes.push(newToken);\n}\n\nfunction attributeMatch(match, content) {\n  this.selector.nodes.push({\n    type: \"attribute\",\n    content: content\n  });\n}\n\nfunction invalidMatch(match) {\n  this.selector.nodes.push({\n    type: \"invalid\",\n    value: match\n  });\n}\n\nfunction irrelevantSpacingStartMatch(match) {\n  this.selector.before = match;\n}\n\nfunction irrelevantSpacingEndMatch(match) {\n  this.selector.after = match;\n}\n\nfunction nextSelectorMatch(match, before, after) {\n  var newSelector = {\n    type: \"selector\",\n    nodes: []\n  };\n\n  if (before) {\n    this.selector.after = before;\n  }\n\n  if (after) {\n    newSelector.before = after;\n  }\n\n  this.root.nodes.push(newSelector);\n  this.selector = newSelector;\n}\n\nfunction addToCurrent(match) {\n  this.token.content += match;\n}\n\nfunction bracketStart(match) {\n  this.token.content += match;\n  this.brackets++;\n}\n\nfunction bracketEnd(match) {\n  if (--this.brackets === 0) {\n    return \"selector\";\n  }\n\n  this.token.content += match;\n}\n\nfunction getSelectors() {\n  // The assignment here is split to preserve the property enumeration order.\n  var selectors = {\n    \"/\\\\*([\\\\s\\\\S]*?)\\\\*/\": commentMatch\n  }; // https://www.w3.org/TR/CSS21/syndata.html#characters\n  // 4.1.3: identifiers (...) can contain only the characters [a-zA-Z0-9] and\n  // ISO 10646 characters U+00A0 and higher, plus the hyphen (-) and the underscore (_)\n  //\n  // 10ffff is the maximum allowed in current Unicode\n\n  selectors[uniRegexp.typeMatchClass] = typeMatch(\"class\");\n  selectors[uniRegexp.typeMatchId] = typeMatch(\"id\");\n  var selectorsSecondHalf = {\n    \":(not|matches|has|local|global)\\\\((\\\\s*)\": nestedPseudoClassStartMatch,\n    \":((?:\\\\\\\\.|[A-Za-z_\\\\-0-9])+)\\\\(\": pseudoClassStartMatch,\n    \":((?:\\\\\\\\.|[A-Za-z_\\\\-0-9])+)\": typeMatch(\"pseudo-class\"),\n    \"::((?:\\\\\\\\.|[A-Za-z_\\\\-0-9])+)\": typeMatch(\"pseudo-element\"),\n    \"(\\\\*\\\\|)((?:\\\\\\\\.|[A-Za-z_\\\\-0-9])+)\": elementMatch,\n    \"(\\\\*\\\\|)\\\\*\": universalMatch,\n    \"((?:\\\\\\\\.|[A-Za-z_\\\\-0-9])*\\\\|)?\\\\*\": universalMatch,\n    \"((?:\\\\\\\\.|[A-Za-z_\\\\-0-9])*\\\\|)?((?:\\\\\\\\.|[A-Za-z_\\\\-])(?:\\\\\\\\.|[A-Za-z_\\\\-0-9])*)\": elementMatch,\n    \"\\\\[([^\\\\]]+)\\\\]\": attributeMatch,\n    \"(\\\\s*)\\\\)\": nestedEnd,\n    \"(\\\\s*)((?:\\\\|\\\\|)|(?:>>)|[>+~])(\\\\s*)\": operatorMatch,\n    \"(\\\\s*),(\\\\s*)\": nextSelectorMatch,\n    \"\\\\s+$\": irrelevantSpacingEndMatch,\n    \"^\\\\s+\": irrelevantSpacingStartMatch,\n    \"\\\\s+\": spacingMatch,\n    \".\": invalidMatch\n  };\n  var selector;\n\n  for (selector in selectorsSecondHalf) {\n    if (Object.prototype.hasOwnProperty.call(selectorsSecondHalf, selector)) {\n      selectors[selector] = selectorsSecondHalf[selector];\n    }\n  }\n\n  return selectors;\n}\n\nvar parser = new Parser({\n  selector: getSelectors(),\n  inBrackets: {\n    \"/\\\\*[\\\\s\\\\S]*?\\\\*/\": addToCurrent,\n    \"\\\"([^\\\\\\\\\\\"]|\\\\\\\\.)*\\\"\": addToCurrent,\n    \"'([^\\\\\\\\']|\\\\\\\\.)*'\": addToCurrent,\n    \"[^()'\\\"/]+\": addToCurrent,\n    \"\\\\(\": bracketStart,\n    \"\\\\)\": bracketEnd,\n    \".\": addToCurrent\n  }\n});\n\nfunction parse(str) {\n  var selectorNode = {\n    type: \"selector\",\n    nodes: []\n  };\n  var rootNode = {\n    type: \"selectors\",\n    nodes: [selectorNode]\n  };\n  parser.parse(\"selector\", str, {\n    stack: [],\n    root: rootNode,\n    selector: selectorNode\n  });\n  return rootNode;\n}\n\nmodule.exports = parse;","map":{"version":3,"sources":["/Users/George/Documents/billy/node_modules/css-selector-tokenizer/lib/parse.js"],"names":["Parser","require","uniRegexp","unescape","str","replace","commentMatch","match","content","selector","nodes","push","type","typeMatch","name","pseudoClassStartMatch","newToken","token","brackets","nestedPseudoClassStartMatch","after","newSelector","before","stack","root","nestedEnd","length","pop","value","operatorMatch","operator","spacingMatch","elementMatch","namespace","substr","universalMatch","attributeMatch","invalidMatch","irrelevantSpacingStartMatch","irrelevantSpacingEndMatch","nextSelectorMatch","addToCurrent","bracketStart","bracketEnd","getSelectors","selectors","typeMatchClass","typeMatchId","selectorsSecondHalf","Object","prototype","hasOwnProperty","call","parser","inBrackets","parse","selectorNode","rootNode","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAvB;;AAEA,SAASE,QAAT,CAAkBC,GAAlB,EAAuB;AACtB,SAAOA,GAAG,CAACC,OAAJ,CAAY,QAAZ,EAAsB,IAAtB,CAAP;AACA;;AAED,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,OAA7B,EAAsC;AACrC,OAAKC,QAAL,CAAcC,KAAd,CAAoBC,IAApB,CAAyB;AACxBC,IAAAA,IAAI,EAAE,SADkB;AAExBJ,IAAAA,OAAO,EAAEA;AAFe,GAAzB;AAIA;;AAED,SAASK,SAAT,CAAmBD,IAAnB,EAAyB;AACxB,SAAO,UAASL,KAAT,EAAgBO,IAAhB,EAAsB;AAC5B,SAAKL,QAAL,CAAcC,KAAd,CAAoBC,IAApB,CAAyB;AACxBC,MAAAA,IAAI,EAAEA,IADkB;AAExBE,MAAAA,IAAI,EAAEX,QAAQ,CAACW,IAAD;AAFU,KAAzB;AAIA,GALD;AAMA;;AAED,SAASC,qBAAT,CAA+BR,KAA/B,EAAsCO,IAAtC,EAA4C;AAC3C,MAAIE,QAAQ,GAAG;AACdJ,IAAAA,IAAI,EAAE,cADQ;AAEdE,IAAAA,IAAI,EAAEX,QAAQ,CAACW,IAAD,CAFA;AAGdN,IAAAA,OAAO,EAAE;AAHK,GAAf;AAKA,OAAKC,QAAL,CAAcC,KAAd,CAAoBC,IAApB,CAAyBK,QAAzB;AACA,OAAKC,KAAL,GAAaD,QAAb;AACA,OAAKE,QAAL,GAAgB,CAAhB;AACA,SAAO,YAAP;AACA;;AAED,SAASC,2BAAT,CAAqCZ,KAArC,EAA4CO,IAA5C,EAAkDM,KAAlD,EAAyD;AACxD,MAAIC,WAAW,GAAG;AACjBT,IAAAA,IAAI,EAAE,UADW;AAEjBF,IAAAA,KAAK,EAAE;AAFU,GAAlB;AAIA,MAAIM,QAAQ,GAAG;AACdJ,IAAAA,IAAI,EAAE,qBADQ;AAEdE,IAAAA,IAAI,EAAEX,QAAQ,CAACW,IAAD,CAFA;AAGdJ,IAAAA,KAAK,EAAE,CAACW,WAAD;AAHO,GAAf;;AAKA,MAAGD,KAAH,EAAU;AACTC,IAAAA,WAAW,CAACC,MAAZ,GAAqBF,KAArB;AACA;;AACD,OAAKX,QAAL,CAAcC,KAAd,CAAoBC,IAApB,CAAyBK,QAAzB;AACA,OAAKO,KAAL,CAAWZ,IAAX,CAAgB,KAAKa,IAArB;AACA,OAAKA,IAAL,GAAYR,QAAZ;AACA,OAAKP,QAAL,GAAgBY,WAAhB;AACA;;AAED,SAASI,SAAT,CAAmBlB,KAAnB,EAA0Be,MAA1B,EAAkC;AACjC,MAAG,KAAKC,KAAL,CAAWG,MAAX,GAAoB,CAAvB,EAA0B;AACzB,QAAGJ,MAAH,EAAW;AACV,WAAKb,QAAL,CAAcW,KAAd,GAAsBE,MAAtB;AACA;;AACD,SAAKE,IAAL,GAAY,KAAKD,KAAL,CAAWI,GAAX,EAAZ;AACA,SAAKlB,QAAL,GAAgB,KAAKe,IAAL,CAAUd,KAAV,CAAgB,KAAKc,IAAL,CAAUd,KAAV,CAAgBgB,MAAhB,GAAyB,CAAzC,CAAhB;AACA,GAND,MAMO;AACN,SAAKjB,QAAL,CAAcC,KAAd,CAAoBC,IAApB,CAAyB;AACxBC,MAAAA,IAAI,EAAE,SADkB;AAExBgB,MAAAA,KAAK,EAAErB;AAFiB,KAAzB;AAIA;AACD;;AAED,SAASsB,aAAT,CAAuBtB,KAAvB,EAA8Be,MAA9B,EAAsCQ,QAAtC,EAAgDV,KAAhD,EAAuD;AACtD,MAAIH,KAAK,GAAG;AACXL,IAAAA,IAAI,EAAE,UADK;AAEXkB,IAAAA,QAAQ,EAAEA;AAFC,GAAZ;;AAIA,MAAGR,MAAH,EAAW;AACVL,IAAAA,KAAK,CAACK,MAAN,GAAeA,MAAf;AACA;;AACD,MAAGF,KAAH,EAAU;AACTH,IAAAA,KAAK,CAACG,KAAN,GAAcA,KAAd;AACA;;AACD,OAAKX,QAAL,CAAcC,KAAd,CAAoBC,IAApB,CAAyBM,KAAzB;AACA;;AAED,SAASc,YAAT,CAAsBxB,KAAtB,EAA6B;AAC5B,OAAKE,QAAL,CAAcC,KAAd,CAAoBC,IAApB,CAAyB;AACxBC,IAAAA,IAAI,EAAE,SADkB;AAExBgB,IAAAA,KAAK,EAAErB;AAFiB,GAAzB;AAIA;;AAED,SAASyB,YAAT,CAAsBzB,KAAtB,EAA6B0B,SAA7B,EAAwCnB,IAAxC,EAA8C;AAC7C,MAAIE,QAAQ,GAAG;AACdJ,IAAAA,IAAI,EAAE,SADQ;AAEdE,IAAAA,IAAI,EAAEX,QAAQ,CAACW,IAAD;AAFA,GAAf;;AAKA,MAAGmB,SAAH,EAAc;AACbjB,IAAAA,QAAQ,CAACiB,SAAT,GAAqB9B,QAAQ,CAAC8B,SAAS,CAACC,MAAV,CAAiB,CAAjB,EAAoBD,SAAS,CAACP,MAAV,GAAmB,CAAvC,CAAD,CAA7B;AACA;;AACD,OAAKjB,QAAL,CAAcC,KAAd,CAAoBC,IAApB,CAAyBK,QAAzB;AACA;;AAED,SAASmB,cAAT,CAAwB5B,KAAxB,EAA+B0B,SAA/B,EAA0C;AACzC,MAAIjB,QAAQ,GAAG;AACdJ,IAAAA,IAAI,EAAE;AADQ,GAAf;;AAGA,MAAGqB,SAAH,EAAc;AACbjB,IAAAA,QAAQ,CAACiB,SAAT,GAAqB9B,QAAQ,CAAC8B,SAAS,CAACC,MAAV,CAAiB,CAAjB,EAAoBD,SAAS,CAACP,MAAV,GAAmB,CAAvC,CAAD,CAA7B;AACA;;AACD,OAAKjB,QAAL,CAAcC,KAAd,CAAoBC,IAApB,CAAyBK,QAAzB;AACA;;AAED,SAASoB,cAAT,CAAwB7B,KAAxB,EAA+BC,OAA/B,EAAwC;AACvC,OAAKC,QAAL,CAAcC,KAAd,CAAoBC,IAApB,CAAyB;AACxBC,IAAAA,IAAI,EAAE,WADkB;AAExBJ,IAAAA,OAAO,EAAEA;AAFe,GAAzB;AAIA;;AAED,SAAS6B,YAAT,CAAsB9B,KAAtB,EAA6B;AAC5B,OAAKE,QAAL,CAAcC,KAAd,CAAoBC,IAApB,CAAyB;AACxBC,IAAAA,IAAI,EAAE,SADkB;AAExBgB,IAAAA,KAAK,EAAErB;AAFiB,GAAzB;AAIA;;AAED,SAAS+B,2BAAT,CAAqC/B,KAArC,EAA4C;AAC3C,OAAKE,QAAL,CAAca,MAAd,GAAuBf,KAAvB;AACA;;AAED,SAASgC,yBAAT,CAAmChC,KAAnC,EAA0C;AACzC,OAAKE,QAAL,CAAcW,KAAd,GAAsBb,KAAtB;AACA;;AAED,SAASiC,iBAAT,CAA2BjC,KAA3B,EAAkCe,MAAlC,EAA0CF,KAA1C,EAAiD;AAChD,MAAIC,WAAW,GAAG;AACjBT,IAAAA,IAAI,EAAE,UADW;AAEjBF,IAAAA,KAAK,EAAE;AAFU,GAAlB;;AAIA,MAAGY,MAAH,EAAW;AACV,SAAKb,QAAL,CAAcW,KAAd,GAAsBE,MAAtB;AACA;;AACD,MAAGF,KAAH,EAAU;AACTC,IAAAA,WAAW,CAACC,MAAZ,GAAqBF,KAArB;AACA;;AACD,OAAKI,IAAL,CAAUd,KAAV,CAAgBC,IAAhB,CAAqBU,WAArB;AACA,OAAKZ,QAAL,GAAgBY,WAAhB;AACA;;AAED,SAASoB,YAAT,CAAsBlC,KAAtB,EAA6B;AAC5B,OAAKU,KAAL,CAAWT,OAAX,IAAsBD,KAAtB;AACA;;AAED,SAASmC,YAAT,CAAsBnC,KAAtB,EAA6B;AAC5B,OAAKU,KAAL,CAAWT,OAAX,IAAsBD,KAAtB;AACA,OAAKW,QAAL;AACA;;AAED,SAASyB,UAAT,CAAoBpC,KAApB,EAA2B;AAC1B,MAAG,EAAE,KAAKW,QAAP,KAAoB,CAAvB,EAA0B;AACzB,WAAO,UAAP;AACA;;AACD,OAAKD,KAAL,CAAWT,OAAX,IAAsBD,KAAtB;AACA;;AAED,SAASqC,YAAT,GAAwB;AACvB;AACA,MAAIC,SAAS,GAAG;AACf,4BAAwBvC;AADT,GAAhB,CAFuB,CAKvB;AACA;AACA;AACA;AACA;;AACAuC,EAAAA,SAAS,CAAC3C,SAAS,CAAC4C,cAAX,CAAT,GAAsCjC,SAAS,CAAC,OAAD,CAA/C;AACAgC,EAAAA,SAAS,CAAC3C,SAAS,CAAC6C,WAAX,CAAT,GAAmClC,SAAS,CAAC,IAAD,CAA5C;AACA,MAAImC,mBAAmB,GAAG;AACzB,gDAA4C7B,2BADnB;AAEzB,wCAAoCJ,qBAFX;AAGzB,qCAAiCF,SAAS,CAAC,cAAD,CAHjB;AAIzB,sCAAkCA,SAAS,CAAC,gBAAD,CAJlB;AAKzB,4CAAwCmB,YALf;AAMzB,mBAAeG,cANU;AAOzB,2CAAuCA,cAPd;AAQzB,0FAAsFH,YAR7D;AASzB,uBAAmBI,cATM;AAUzB,iBAAaX,SAVY;AAWzB,6CAAyCI,aAXhB;AAYzB,qBAAiBW,iBAZQ;AAazB,aAASD,yBAbgB;AAczB,aAASD,2BAdgB;AAezB,YAAQP,YAfiB;AAgBzB,SAAKM;AAhBoB,GAA1B;AAkBA,MAAI5B,QAAJ;;AACA,OAAKA,QAAL,IAAiBuC,mBAAjB,EAAsC;AACrC,QAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,mBAArC,EAA0DvC,QAA1D,CAAJ,EAAyE;AACxEoC,MAAAA,SAAS,CAACpC,QAAD,CAAT,GAAsBuC,mBAAmB,CAACvC,QAAD,CAAzC;AACA;AACD;;AACD,SAAOoC,SAAP;AACA;;AAED,IAAIQ,MAAM,GAAG,IAAIrD,MAAJ,CAAW;AACvBS,EAAAA,QAAQ,EAAEmC,YAAY,EADC;AAEvBU,EAAAA,UAAU,EAAE;AACX,0BAAsBb,YADX;AAEX,8BAA0BA,YAFf;AAGX,2BAAuBA,YAHZ;AAIX,kBAAcA,YAJH;AAKX,WAAOC,YALI;AAMX,WAAOC,UANI;AAOX,SAAKF;AAPM;AAFW,CAAX,CAAb;;AAaA,SAASc,KAAT,CAAenD,GAAf,EAAoB;AACnB,MAAIoD,YAAY,GAAG;AAClB5C,IAAAA,IAAI,EAAE,UADY;AAElBF,IAAAA,KAAK,EAAE;AAFW,GAAnB;AAIA,MAAI+C,QAAQ,GAAG;AACd7C,IAAAA,IAAI,EAAE,WADQ;AAEdF,IAAAA,KAAK,EAAE,CACN8C,YADM;AAFO,GAAf;AAMAH,EAAAA,MAAM,CAACE,KAAP,CAAa,UAAb,EAAyBnD,GAAzB,EAA8B;AAC7BmB,IAAAA,KAAK,EAAE,EADsB;AAE7BC,IAAAA,IAAI,EAAEiC,QAFuB;AAG7BhD,IAAAA,QAAQ,EAAE+C;AAHmB,GAA9B;AAKA,SAAOC,QAAP;AACA;;AAEDC,MAAM,CAACC,OAAP,GAAiBJ,KAAjB","sourcesContent":["\"use strict\";\n\nvar Parser = require(\"fastparse\");\nvar uniRegexp = require(\"./uni-regexp\");\n\nfunction unescape(str) {\n\treturn str.replace(/\\\\(.)/g, \"$1\");\n}\n\nfunction commentMatch(match, content) {\n\tthis.selector.nodes.push({\n\t\ttype: \"comment\",\n\t\tcontent: content\n\t});\n}\n\nfunction typeMatch(type) {\n\treturn function(match, name) {\n\t\tthis.selector.nodes.push({\n\t\t\ttype: type,\n\t\t\tname: unescape(name)\n\t\t});\n\t};\n}\n\nfunction pseudoClassStartMatch(match, name) {\n\tvar newToken = {\n\t\ttype: \"pseudo-class\",\n\t\tname: unescape(name),\n\t\tcontent: \"\"\n\t};\n\tthis.selector.nodes.push(newToken);\n\tthis.token = newToken;\n\tthis.brackets = 1;\n\treturn \"inBrackets\";\n}\n\nfunction nestedPseudoClassStartMatch(match, name, after) {\n\tvar newSelector = {\n\t\ttype: \"selector\",\n\t\tnodes: []\n\t};\n\tvar newToken = {\n\t\ttype: \"nested-pseudo-class\",\n\t\tname: unescape(name),\n\t\tnodes: [newSelector]\n\t};\n\tif(after) {\n\t\tnewSelector.before = after;\n\t}\n\tthis.selector.nodes.push(newToken);\n\tthis.stack.push(this.root);\n\tthis.root = newToken;\n\tthis.selector = newSelector;\n}\n\nfunction nestedEnd(match, before) {\n\tif(this.stack.length > 0) {\n\t\tif(before) {\n\t\t\tthis.selector.after = before;\n\t\t}\n\t\tthis.root = this.stack.pop();\n\t\tthis.selector = this.root.nodes[this.root.nodes.length - 1];\n\t} else {\n\t\tthis.selector.nodes.push({\n\t\t\ttype: \"invalid\",\n\t\t\tvalue: match\n\t\t});\n\t}\n}\n\nfunction operatorMatch(match, before, operator, after) {\n\tvar token = {\n\t\ttype: \"operator\",\n\t\toperator: operator\n\t};\n\tif(before) {\n\t\ttoken.before = before;\n\t}\n\tif(after) {\n\t\ttoken.after = after;\n\t}\n\tthis.selector.nodes.push(token);\n}\n\nfunction spacingMatch(match) {\n\tthis.selector.nodes.push({\n\t\ttype: \"spacing\",\n\t\tvalue: match\n\t});\n}\n\nfunction elementMatch(match, namespace, name) {\n\tvar newToken = {\n\t\ttype: \"element\",\n\t\tname: unescape(name)\n\t};\n\n\tif(namespace) {\n\t\tnewToken.namespace = unescape(namespace.substr(0, namespace.length - 1));\n\t}\n\tthis.selector.nodes.push(newToken);\n}\n\nfunction universalMatch(match, namespace) {\n\tvar newToken = {\n\t\ttype: \"universal\"\n\t};\n\tif(namespace) {\n\t\tnewToken.namespace = unescape(namespace.substr(0, namespace.length - 1));\n\t}\n\tthis.selector.nodes.push(newToken);\n}\n\nfunction attributeMatch(match, content) {\n\tthis.selector.nodes.push({\n\t\ttype: \"attribute\",\n\t\tcontent: content\n\t});\n}\n\nfunction invalidMatch(match) {\n\tthis.selector.nodes.push({\n\t\ttype: \"invalid\",\n\t\tvalue: match\n\t});\n}\n\nfunction irrelevantSpacingStartMatch(match) {\n\tthis.selector.before = match;\n}\n\nfunction irrelevantSpacingEndMatch(match) {\n\tthis.selector.after = match;\n}\n\nfunction nextSelectorMatch(match, before, after) {\n\tvar newSelector = {\n\t\ttype: \"selector\",\n\t\tnodes: []\n\t};\n\tif(before) {\n\t\tthis.selector.after = before;\n\t}\n\tif(after) {\n\t\tnewSelector.before = after;\n\t}\n\tthis.root.nodes.push(newSelector);\n\tthis.selector = newSelector;\n}\n\nfunction addToCurrent(match) {\n\tthis.token.content += match;\n}\n\nfunction bracketStart(match) {\n\tthis.token.content += match;\n\tthis.brackets++;\n}\n\nfunction bracketEnd(match) {\n\tif(--this.brackets === 0) {\n\t\treturn \"selector\";\n\t}\n\tthis.token.content += match;\n}\n\nfunction getSelectors() {\n\t// The assignment here is split to preserve the property enumeration order.\n\tvar selectors = {\n\t\t\"/\\\\*([\\\\s\\\\S]*?)\\\\*/\": commentMatch\n\t};\n\t// https://www.w3.org/TR/CSS21/syndata.html#characters\n\t// 4.1.3: identifiers (...) can contain only the characters [a-zA-Z0-9] and\n\t// ISO 10646 characters U+00A0 and higher, plus the hyphen (-) and the underscore (_)\n\t//\n\t// 10ffff is the maximum allowed in current Unicode\n\tselectors[uniRegexp.typeMatchClass] = typeMatch(\"class\");\n\tselectors[uniRegexp.typeMatchId] = typeMatch(\"id\");\n\tvar selectorsSecondHalf = {\n\t\t\":(not|matches|has|local|global)\\\\((\\\\s*)\": nestedPseudoClassStartMatch,\n\t\t\":((?:\\\\\\\\.|[A-Za-z_\\\\-0-9])+)\\\\(\": pseudoClassStartMatch,\n\t\t\":((?:\\\\\\\\.|[A-Za-z_\\\\-0-9])+)\": typeMatch(\"pseudo-class\"),\n\t\t\"::((?:\\\\\\\\.|[A-Za-z_\\\\-0-9])+)\": typeMatch(\"pseudo-element\"),\n\t\t\"(\\\\*\\\\|)((?:\\\\\\\\.|[A-Za-z_\\\\-0-9])+)\": elementMatch,\n\t\t\"(\\\\*\\\\|)\\\\*\": universalMatch,\n\t\t\"((?:\\\\\\\\.|[A-Za-z_\\\\-0-9])*\\\\|)?\\\\*\": universalMatch,\n\t\t\"((?:\\\\\\\\.|[A-Za-z_\\\\-0-9])*\\\\|)?((?:\\\\\\\\.|[A-Za-z_\\\\-])(?:\\\\\\\\.|[A-Za-z_\\\\-0-9])*)\": elementMatch,\n\t\t\"\\\\[([^\\\\]]+)\\\\]\": attributeMatch,\n\t\t\"(\\\\s*)\\\\)\": nestedEnd,\n\t\t\"(\\\\s*)((?:\\\\|\\\\|)|(?:>>)|[>+~])(\\\\s*)\": operatorMatch,\n\t\t\"(\\\\s*),(\\\\s*)\": nextSelectorMatch,\n\t\t\"\\\\s+$\": irrelevantSpacingEndMatch,\n\t\t\"^\\\\s+\": irrelevantSpacingStartMatch,\n\t\t\"\\\\s+\": spacingMatch,\n\t\t\".\": invalidMatch\n\t};\n\tvar selector;\n\tfor (selector in selectorsSecondHalf) {\n\t\tif (Object.prototype.hasOwnProperty.call(selectorsSecondHalf, selector)) {\n\t\t\tselectors[selector] = selectorsSecondHalf[selector];\n\t\t}\n\t}\n\treturn selectors;\n}\n\nvar parser = new Parser({\n\tselector: getSelectors(),\n\tinBrackets: {\n\t\t\"/\\\\*[\\\\s\\\\S]*?\\\\*/\": addToCurrent,\n\t\t\"\\\"([^\\\\\\\\\\\"]|\\\\\\\\.)*\\\"\": addToCurrent,\n\t\t\"'([^\\\\\\\\']|\\\\\\\\.)*'\": addToCurrent,\n\t\t\"[^()'\\\"/]+\": addToCurrent,\n\t\t\"\\\\(\": bracketStart,\n\t\t\"\\\\)\": bracketEnd,\n\t\t\".\": addToCurrent\n\t}\n});\n\nfunction parse(str) {\n\tvar selectorNode = {\n\t\ttype: \"selector\",\n\t\tnodes: []\n\t};\n\tvar rootNode = {\n\t\ttype: \"selectors\",\n\t\tnodes: [\n\t\t\tselectorNode\n\t\t]\n\t};\n\tparser.parse(\"selector\", str, {\n\t\tstack: [],\n\t\troot: rootNode,\n\t\tselector: selectorNode\n\t});\n\treturn rootNode;\n}\n\nmodule.exports = parse;\n"]},"metadata":{},"sourceType":"script"}