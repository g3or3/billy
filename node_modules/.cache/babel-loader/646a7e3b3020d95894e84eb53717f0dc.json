{"ast":null,"code":"\"use strict\";\n\nvar uniRegexp = require(\"./uni-regexp\");\n\nvar identifierEscapeRegexp = new RegExp(uniRegexp.identifierEscapeRegexp, \"g\");\n\nfunction escape(str, identifier) {\n  if (str === \"*\") {\n    return \"*\";\n  }\n\n  if (identifier) {\n    return str.replace(identifierEscapeRegexp, \"\\\\$1\");\n  } else {\n    return str.replace(/(^[^A-Za-z_\\\\-]|^--|[^A-Za-z_0-9\\\\-])/g, \"\\\\$1\");\n  }\n}\n\nfunction stringifyWithoutBeforeAfter(tree) {\n  switch (tree.type) {\n    case \"selectors\":\n      return tree.nodes.map(stringify).join(\",\");\n\n    case \"selector\":\n      return tree.nodes.map(stringify).join(\"\");\n\n    case \"element\":\n      return (typeof tree.namespace === \"string\" ? escape(tree.namespace) + \"|\" : \"\") + escape(tree.name);\n\n    case \"class\":\n      return \".\" + escape(tree.name, true);\n\n    case \"id\":\n      return \"#\" + escape(tree.name, true);\n\n    case \"attribute\":\n      return \"[\" + tree.content + \"]\";\n\n    case \"spacing\":\n      return tree.value;\n\n    case \"pseudo-class\":\n      return \":\" + escape(tree.name) + (typeof tree.content === \"string\" ? \"(\" + tree.content + \")\" : \"\");\n\n    case \"nested-pseudo-class\":\n      return \":\" + escape(tree.name) + \"(\" + tree.nodes.map(stringify).join(\",\") + \")\";\n\n    case \"pseudo-element\":\n      return \"::\" + escape(tree.name);\n\n    case \"universal\":\n      return (typeof tree.namespace === \"string\" ? escape(tree.namespace) + \"|\" : \"\") + \"*\";\n\n    case \"operator\":\n      return tree.operator;\n\n    case \"comment\":\n      return \"/*\" + tree.content + \"*/\";\n\n    case \"invalid\":\n      return tree.value;\n  }\n}\n\nfunction stringify(tree) {\n  var str = stringifyWithoutBeforeAfter(tree);\n\n  if (tree.before) {\n    str = tree.before + str;\n  }\n\n  if (tree.after) {\n    str = str + tree.after;\n  }\n\n  return str;\n}\n\nmodule.exports = stringify;","map":{"version":3,"sources":["/Users/George/Documents/billy/node_modules/css-selector-tokenizer/lib/stringify.js"],"names":["uniRegexp","require","identifierEscapeRegexp","RegExp","escape","str","identifier","replace","stringifyWithoutBeforeAfter","tree","type","nodes","map","stringify","join","namespace","name","content","value","operator","before","after","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar uniRegexp = require(\"./uni-regexp\");\nvar identifierEscapeRegexp = new RegExp(uniRegexp.identifierEscapeRegexp, \"g\");\n\nfunction escape(str, identifier) {\n\tif(str === \"*\") {\n\t\treturn \"*\";\n\t}\n\tif (identifier) {\n\t\treturn str.replace(identifierEscapeRegexp, \"\\\\$1\");\n\t} else {\n\t\treturn str.replace(/(^[^A-Za-z_\\\\-]|^--|[^A-Za-z_0-9\\\\-])/g, \"\\\\$1\");\n\t}\n}\n\nfunction stringifyWithoutBeforeAfter(tree) {\n\tswitch(tree.type) {\n\tcase \"selectors\":\n\t\treturn tree.nodes.map(stringify).join(\",\");\n\tcase \"selector\":\n\t\treturn tree.nodes.map(stringify).join(\"\");\n\tcase \"element\":\n\t\treturn (typeof tree.namespace === \"string\" ? escape(tree.namespace) + \"|\" : \"\") + escape(tree.name);\n\tcase \"class\":\n\t\treturn \".\" + escape(tree.name, true);\n\tcase \"id\":\n\t\treturn \"#\" + escape(tree.name, true);\n\tcase \"attribute\":\n\t\treturn \"[\" + tree.content + \"]\";\n\tcase \"spacing\":\n\t\treturn tree.value;\n\tcase \"pseudo-class\":\n\t\treturn \":\" + escape(tree.name) + (typeof tree.content === \"string\" ? \"(\" + tree.content + \")\" : \"\");\n\tcase \"nested-pseudo-class\":\n\t\treturn \":\" + escape(tree.name) + \"(\" + tree.nodes.map(stringify).join(\",\") + \")\";\n\tcase \"pseudo-element\":\n\t\treturn \"::\" + escape(tree.name);\n\tcase \"universal\":\n\t\treturn (typeof tree.namespace === \"string\" ? escape(tree.namespace) + \"|\" : \"\") + \"*\";\n\tcase \"operator\":\n\t\treturn tree.operator;\n\tcase \"comment\":\n\t\treturn \"/*\" + tree.content + \"*/\";\n\tcase \"invalid\":\n\t\treturn tree.value;\n\t}\n}\n\n\nfunction stringify(tree) {\n\tvar str = stringifyWithoutBeforeAfter(tree);\n\tif(tree.before) {\n\t\tstr = tree.before + str;\n\t}\n\tif(tree.after) {\n\t\tstr = str + tree.after;\n\t}\n\treturn str;\n}\n\nmodule.exports = stringify;\n"]},"metadata":{},"sourceType":"script"}