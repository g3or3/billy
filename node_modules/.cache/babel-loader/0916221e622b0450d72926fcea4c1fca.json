{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _sourceMap = require('source-map');\n\nvar _sourceMap2 = _interopRequireDefault(_sourceMap);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * @example\n * const root = postcss.parse(css, { from: 'a.sass.css' });\n * root.input.map //=> PreviousMap\n */\n\n\nvar PreviousMap = function () {\n  /**\n   * @param {string}         css    - input CSS source\n   * @param {processOptions} [opts] - {@link Processor#process} options\n   */\n  function PreviousMap(css, opts) {\n    _classCallCheck(this, PreviousMap);\n\n    this.loadAnnotation(css);\n    /**\n     * @member {boolean} - Was source map inlined by data-uri to input CSS.\n     */\n\n    this.inline = this.startWith(this.annotation, 'data:');\n    var prev = opts.map ? opts.map.prev : undefined;\n    var text = this.loadMap(opts.from, prev);\n    if (text) this.text = text;\n  }\n  /**\n   * Create a instance of `SourceMapGenerator` class\n   * from the `source-map` library to work with source map information.\n   *\n   * It is lazy method, so it will create object only on first call\n   * and then it will use cache.\n   *\n   * @return {SourceMapGenerator} object with source map information\n   */\n\n\n  PreviousMap.prototype.consumer = function consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new _sourceMap2.default.SourceMapConsumer(this.text);\n    }\n\n    return this.consumerCache;\n  };\n  /**\n   * Does source map contains `sourcesContent` with input source text.\n   *\n   * @return {boolean} Is `sourcesContent` present\n   */\n\n\n  PreviousMap.prototype.withContent = function withContent() {\n    return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n  };\n\n  PreviousMap.prototype.startWith = function startWith(string, start) {\n    if (!string) return false;\n    return string.substr(0, start.length) === start;\n  };\n\n  PreviousMap.prototype.loadAnnotation = function loadAnnotation(css) {\n    var match = css.match(/\\/\\*\\s*# sourceMappingURL=(.*)\\s*\\*\\//);\n    if (match) this.annotation = match[1].trim();\n  };\n\n  PreviousMap.prototype.decodeInline = function decodeInline(text) {\n    // data:application/json;charset=utf-8;base64,\n    // data:application/json;charset=utf8;base64,\n    // data:application/json;base64,\n    var baseUri = /^data:application\\/json;(?:charset=utf-?8;)?base64,/;\n    var uri = 'data:application/json,';\n\n    if (this.startWith(text, uri)) {\n      return decodeURIComponent(text.substr(uri.length));\n    } else if (baseUri.test(text)) {\n      return new Buffer(text.substr(RegExp.lastMatch.length), 'base64').toString();\n    } else {\n      var encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n      throw new Error('Unsupported source map encoding ' + encoding);\n    }\n  };\n\n  PreviousMap.prototype.loadMap = function loadMap(file, prev) {\n    if (prev === false) return false;\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev;\n      } else if (typeof prev === 'function') {\n        var prevPath = prev(file);\n\n        if (prevPath && _fs2.default.existsSync && _fs2.default.existsSync(prevPath)) {\n          return _fs2.default.readFileSync(prevPath, 'utf-8').toString().trim();\n        } else {\n          throw new Error('Unable to load previous source map: ' + prevPath.toString());\n        }\n      } else if (prev instanceof _sourceMap2.default.SourceMapConsumer) {\n        return _sourceMap2.default.SourceMapGenerator.fromSourceMap(prev).toString();\n      } else if (prev instanceof _sourceMap2.default.SourceMapGenerator) {\n        return prev.toString();\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev);\n      } else {\n        throw new Error('Unsupported previous source map format: ' + prev.toString());\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation);\n    } else if (this.annotation) {\n      var map = this.annotation;\n      if (file) map = _path2.default.join(_path2.default.dirname(file), map);\n      this.root = _path2.default.dirname(map);\n\n      if (_fs2.default.existsSync && _fs2.default.existsSync(map)) {\n        return _fs2.default.readFileSync(map, 'utf-8').toString().trim();\n      } else {\n        return false;\n      }\n    }\n  };\n\n  PreviousMap.prototype.isMap = function isMap(map) {\n    if ((typeof map === 'undefined' ? 'undefined' : _typeof(map)) !== 'object') return false;\n    return typeof map.mappings === 'string' || typeof map._mappings === 'string';\n  };\n\n  return PreviousMap;\n}();\n\nexports.default = PreviousMap;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["previous-map.es6"],"names":["PreviousMap","prev","opts","text","consumer","withContent","startWith","string","start","loadAnnotation","css","match","decodeInline","baseUri","uri","decodeURIComponent","RegExp","encoding","loadMap","file","prevPath","JSON","map","isMap"],"mappings":"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","sourcesContent":["import   mozilla  from 'source-map';\nimport   path     from 'path';\nimport   fs       from 'fs';\n\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * @example\n * const root = postcss.parse(css, { from: 'a.sass.css' });\n * root.input.map //=> PreviousMap\n */\nclass PreviousMap {\n\n    /**\n     * @param {string}         css    - input CSS source\n     * @param {processOptions} [opts] - {@link Processor#process} options\n     */\n    constructor(css, opts) {\n        this.loadAnnotation(css);\n        /**\n         * @member {boolean} - Was source map inlined by data-uri to input CSS.\n         */\n        this.inline = this.startWith(this.annotation, 'data:');\n\n        let prev = opts.map ? opts.map.prev : undefined;\n        let text = this.loadMap(opts.from, prev);\n        if ( text ) this.text = text;\n    }\n\n    /**\n     * Create a instance of `SourceMapGenerator` class\n     * from the `source-map` library to work with source map information.\n     *\n     * It is lazy method, so it will create object only on first call\n     * and then it will use cache.\n     *\n     * @return {SourceMapGenerator} object with source map information\n     */\n    consumer() {\n        if ( !this.consumerCache ) {\n            this.consumerCache = new mozilla.SourceMapConsumer(this.text);\n        }\n        return this.consumerCache;\n    }\n\n    /**\n     * Does source map contains `sourcesContent` with input source text.\n     *\n     * @return {boolean} Is `sourcesContent` present\n     */\n    withContent() {\n        return !!(this.consumer().sourcesContent &&\n                  this.consumer().sourcesContent.length > 0);\n    }\n\n    startWith(string, start) {\n        if ( !string ) return false;\n        return string.substr(0, start.length) === start;\n    }\n\n    loadAnnotation(css) {\n        let match = css.match(/\\/\\*\\s*# sourceMappingURL=(.*)\\s*\\*\\//);\n        if ( match ) this.annotation = match[1].trim();\n    }\n\n    decodeInline(text) {\n        // data:application/json;charset=utf-8;base64,\n        // data:application/json;charset=utf8;base64,\n        // data:application/json;base64,\n        let baseUri = /^data:application\\/json;(?:charset=utf-?8;)?base64,/;\n        let uri     = 'data:application/json,';\n\n        if ( this.startWith(text, uri) ) {\n            return decodeURIComponent( text.substr(uri.length) );\n\n        } else if ( baseUri.test(text) ) {\n            return new Buffer(text.substr(RegExp.lastMatch.length), 'base64')\n                .toString();\n\n        } else {\n            let encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n            throw new Error('Unsupported source map encoding ' + encoding);\n        }\n    }\n\n    loadMap(file, prev) {\n        if ( prev === false ) return false;\n\n        if ( prev ) {\n            if ( typeof prev === 'string' ) {\n                return prev;\n            } else if ( typeof prev === 'function' ) {\n                let prevPath = prev(file);\n                if ( prevPath && fs.existsSync && fs.existsSync(prevPath) ) {\n                    return fs.readFileSync(prevPath, 'utf-8').toString().trim();\n                } else {\n                    throw new Error('Unable to load previous source map: ' +\n                    prevPath.toString());\n                }\n            } else if ( prev instanceof mozilla.SourceMapConsumer ) {\n                return mozilla.SourceMapGenerator\n                    .fromSourceMap(prev).toString();\n            } else if ( prev instanceof mozilla.SourceMapGenerator ) {\n                return prev.toString();\n            } else if ( this.isMap(prev) ) {\n                return JSON.stringify(prev);\n            } else {\n                throw new Error('Unsupported previous source map format: ' +\n                    prev.toString());\n            }\n\n        } else if ( this.inline ) {\n            return this.decodeInline(this.annotation);\n\n        } else if ( this.annotation ) {\n            let map = this.annotation;\n            if ( file ) map = path.join(path.dirname(file), map);\n\n            this.root = path.dirname(map);\n            if ( fs.existsSync && fs.existsSync(map) ) {\n                return fs.readFileSync(map, 'utf-8').toString().trim();\n            } else {\n                return false;\n            }\n        }\n    }\n\n    isMap(map) {\n        if ( typeof map !== 'object' ) return false;\n        return typeof map.mappings === 'string' ||\n               typeof map._mappings === 'string';\n    }\n}\n\nexport default PreviousMap;\n"]},"metadata":{},"sourceType":"script"}