{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = parse;\n\nvar _parser = require('./parser');\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nvar _input = require('./input');\n\nvar _input2 = _interopRequireDefault(_input);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction parse(css, opts) {\n  if (opts && opts.safe) {\n    throw new Error('Option safe was removed. ' + 'Use parser: require(\"postcss-safe-parser\")');\n  }\n\n  var input = new _input2.default(css, opts);\n  var parser = new _parser2.default(input);\n\n  try {\n    parser.parse();\n  } catch (e) {\n    if (e.name === 'CssSyntaxError' && opts && opts.from) {\n      if (/\\.scss$/i.test(opts.from)) {\n        e.message += '\\nYou tried to parse SCSS with ' + 'the standard CSS parser; ' + 'try again with the postcss-scss parser';\n      } else if (/\\.sass/i.test(opts.from)) {\n        e.message += '\\nYou tried to parse Sass with ' + 'the standard CSS parser; ' + 'try again with the postcss-sass parser';\n      } else if (/\\.less$/i.test(opts.from)) {\n        e.message += '\\nYou tried to parse Less with ' + 'the standard CSS parser; ' + 'try again with the postcss-less parser';\n      }\n    }\n\n    throw e;\n  }\n\n  return parser.root;\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["parse.es6"],"names":["parse","opts","input","parser","e"],"mappings":";;;kBAGwBA,K;;AAHxB,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;;;;;;;;;AAEe,SAAA,KAAA,CAAA,GAAA,EAAA,IAAA,EAA0B;AACrC,MAAKC,IAAAA,IAAQA,IAAAA,CAAb,IAAA,EAAyB;AACrB,UAAM,IAAA,KAAA,CAAU,8BAAhB,4CAAM,CAAN;AAEH;;AAED,MAAIC,KAAAA,GAAQ,IAAA,OAAA,CAAA,OAAA,CAAA,GAAA,EAAZ,IAAY,CAAZ;AACA,MAAIC,MAAAA,GAAS,IAAA,QAAA,CAAA,OAAA,CAAb,KAAa,CAAb;;AACA,MAAI;AACAA,IAAAA,MAAAA,CAAAA,KAAAA;AADJ,GAAA,CAEE,OAAA,CAAA,EAAU;AACR,QAAKC,CAAAA,CAAAA,IAAAA,KAAAA,gBAAAA,IAAAA,IAAAA,IAAuCH,IAAAA,CAA5C,IAAA,EAAwD;AACpD,UAAK,WAAA,IAAA,CAAgBA,IAAAA,CAArB,IAAK,CAAL,EAAkC;AAC9BG,QAAAA,CAAAA,CAAAA,OAAAA,IAAa,oCAAA,2BAAA,GAAbA,wCAAAA;AADJ,OAAA,MAIO,IAAK,UAAA,IAAA,CAAeH,IAAAA,CAApB,IAAK,CAAL,EAAiC;AACpCG,QAAAA,CAAAA,CAAAA,OAAAA,IAAa,oCAAA,2BAAA,GAAbA,wCAAAA;AADG,OAAA,MAIA,IAAK,WAAA,IAAA,CAAgBH,IAAAA,CAArB,IAAK,CAAL,EAAkC;AACrCG,QAAAA,CAAAA,CAAAA,OAAAA,IAAa,oCAAA,2BAAA,GAAbA,wCAAAA;AAGH;AACJ;;AACD,UAAA,CAAA;AACH;;AAED,SAAOD,MAAAA,CAAP,IAAA;AACH","sourcesContent":["import Parser from './parser';\nimport Input  from './input';\n\nexport default function parse(css, opts) {\n    if ( opts && opts.safe ) {\n        throw new Error('Option safe was removed. ' +\n                        'Use parser: require(\"postcss-safe-parser\")');\n    }\n\n    let input = new Input(css, opts);\n    let parser = new Parser(input);\n    try {\n        parser.parse();\n    } catch (e) {\n        if ( e.name === 'CssSyntaxError' && opts && opts.from ) {\n            if ( /\\.scss$/i.test(opts.from) ) {\n                e.message += '\\nYou tried to parse SCSS with ' +\n                             'the standard CSS parser; ' +\n                             'try again with the postcss-scss parser';\n            } else if ( /\\.sass/i.test(opts.from) ) {\n                e.message += '\\nYou tried to parse Sass with ' +\n                             'the standard CSS parser; ' +\n                             'try again with the postcss-sass parser';\n            } else if ( /\\.less$/i.test(opts.from) ) {\n                e.message += '\\nYou tried to parse Less with ' +\n                             'the standard CSS parser; ' +\n                             'try again with the postcss-less parser';\n            }\n        }\n        throw e;\n    }\n\n    return parser.root;\n}\n"]},"metadata":{},"sourceType":"script"}