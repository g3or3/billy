{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _tokenize = require('./tokenize');\n\nvar _tokenize2 = _interopRequireDefault(_tokenize);\n\nvar _input = require('./input');\n\nvar _input2 = _interopRequireDefault(_input);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar colors = new _chalk2.default.constructor({\n  enabled: true\n});\nvar HIGHLIGHT_THEME = {\n  'brackets': colors.cyan,\n  'at-word': colors.cyan,\n  'call': colors.cyan,\n  'comment': colors.gray,\n  'string': colors.green,\n  'class': colors.yellow,\n  'hash': colors.magenta,\n  '(': colors.cyan,\n  ')': colors.cyan,\n  '{': colors.yellow,\n  '}': colors.yellow,\n  '[': colors.yellow,\n  ']': colors.yellow,\n  ':': colors.yellow,\n  ';': colors.yellow\n};\n\nfunction getTokenType(_ref, processor) {\n  var type = _ref[0],\n      value = _ref[1];\n\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class';\n    }\n\n    if (value[0] === '#') {\n      return 'hash';\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    var next = processor.nextToken();\n    processor.back(next);\n    if (next[0] === 'brackets' || next[0] === '(') return 'call';\n  }\n\n  return type;\n}\n\nfunction terminalHighlight(css) {\n  var processor = (0, _tokenize2.default)(new _input2.default(css), {\n    ignoreErrors: true\n  });\n  var result = '';\n\n  var _loop = function _loop() {\n    var token = processor.nextToken();\n    var color = HIGHLIGHT_THEME[getTokenType(token, processor)];\n\n    if (color) {\n      result += token[1].split(/\\r?\\n/).map(function (i) {\n        return color(i);\n      }).join('\\n');\n    } else {\n      result += token[1];\n    }\n  };\n\n  while (!processor.endOfFile()) {\n    _loop();\n  }\n\n  return result;\n}\n\nexports.default = terminalHighlight;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["terminal-highlight.es6"],"names":["colors","enabled","HIGHLIGHT_THEME","yellow","type","value","processor","next","ignoreErrors","result","token","color","getTokenType","terminalHighlight"],"mappings":";;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;;;;;;;;;AAEA,IAAIA,MAAAA,GAAS,IAAI,OAAA,CAAA,OAAA,CAAJ,WAAA,CAAsB;AAAEC,EAAAA,OAAAA,EAArC;AAAmC,CAAtB,CAAb;AAEA,IAAMC,eAAAA,GAAkB;AACpB,cAAYF,MAAAA,CADQ,IAAA;AAEpB,aAAYA,MAAAA,CAFQ,IAAA;AAGpB,UAAYA,MAAAA,CAHQ,IAAA;AAIpB,aAAYA,MAAAA,CAJQ,IAAA;AAKpB,YAAYA,MAAAA,CALQ,KAAA;AAMpB,WAAYA,MAAAA,CANQ,MAAA;AAOpB,UAAYA,MAAAA,CAPQ,OAAA;AAQpB,OAAYA,MAAAA,CARQ,IAAA;AASpB,OAAYA,MAAAA,CATQ,IAAA;AAUpB,OAAYA,MAAAA,CAVQ,MAAA;AAWpB,OAAYA,MAAAA,CAXQ,MAAA;AAYpB,OAAYA,MAAAA,CAZQ,MAAA;AAapB,OAAYA,MAAAA,CAbQ,MAAA;AAcpB,OAAYA,MAAAA,CAdQ,MAAA;AAepB,OAAYA,MAAAA,CAAOG;AAfC,CAAxB;;AAkBA,SAAA,YAAA,CAAA,IAAA,EAAA,SAAA,EAAgD;AAAA,MAAzBC,IAAyB,GAAA,IAAA,CAAA,CAAA,CAAA;AAAA,MAAnBC,KAAmB,GAAA,IAAA,CAAA,CAAA,CAAA;;AAC5C,MAAKD,IAAAA,KAAL,MAAA,EAAuB;AACnB,QAAKC,KAAAA,CAAAA,CAAAA,CAAAA,KAAL,GAAA,EAAwB;AACpB,aAAA,OAAA;AACH;;AACD,QAAKA,KAAAA,CAAAA,CAAAA,CAAAA,KAAL,GAAA,EAAwB;AACpB,aAAA,MAAA;AACH;AACJ;;AAED,MAAK,CAACC,SAAAA,CAAN,SAAMA,EAAN,EAA8B;AAC1B,QAAIC,IAAAA,GAAOD,SAAAA,CAAX,SAAWA,EAAX;AACAA,IAAAA,SAAAA,CAAAA,IAAAA,CAAAA,IAAAA;AACA,QAAKC,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA,UAAAA,IAA0BA,IAAAA,CAAAA,CAAAA,CAAAA,KAA/B,GAAA,EAAiD,OAAA,MAAA;AACpD;;AAED,SAAA,IAAA;AACH;;AAED,SAAA,iBAAA,CAAA,GAAA,EAAgC;AAC5B,MAAID,SAAAA,GAAY,CAAA,GAAA,UAAA,CAAA,OAAA,EAAU,IAAA,OAAA,CAAA,OAAA,CAAV,GAAU,CAAV,EAA0B;AAAEE,IAAAA,YAAAA,EAA5C;AAA0C,GAA1B,CAAhB;AACA,MAAIC,MAAAA,GAAJ,EAAA;;AAF4B,MAAA,KAAA,GAAA,SAAA,KAAA,GAAA;AAIxB,QAAIC,KAAAA,GAAQJ,SAAAA,CAAZ,SAAYA,EAAZ;AACA,QAAIK,KAAAA,GAAQT,eAAAA,CAAgBU,YAAAA,CAAAA,KAAAA,EAA5B,SAA4BA,CAAhBV,CAAZ;;AACA,QAAA,KAAA,EAAa;AACTO,MAAAA,MAAAA,IAAU,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,OAAA,EAAA,GAAA,CACF,UAAA,CAAA,EAAA;AAAA,eAAKE,KAAAA,CAAL,CAAKA,CAAL;AADE,OAAA,EAAA,IAAA,CAAVF,IAAU,CAAVA;AADJ,KAAA,MAIO;AACHA,MAAAA,MAAAA,IAAUC,KAAAA,CAAVD,CAAUC,CAAVD;AACH;AAZuB,GAAA;;AAG5B,SAAQ,CAACH,SAAAA,CAAT,SAASA,EAAT,EAAiC;AAAA,IAAA,KAAA;AAUhC;;AACD,SAAA,MAAA;AACH;;kBAEcO,iB","sourcesContent":["import chalk from 'chalk';\n\nimport tokenizer from './tokenize';\nimport Input    from './input';\n\nlet colors = new chalk.constructor({ enabled: true });\n\nconst HIGHLIGHT_THEME = {\n    'brackets': colors.cyan,\n    'at-word':  colors.cyan,\n    'call':     colors.cyan,\n    'comment':  colors.gray,\n    'string':   colors.green,\n    'class':    colors.yellow,\n    'hash':     colors.magenta,\n    '(':        colors.cyan,\n    ')':        colors.cyan,\n    '{':        colors.yellow,\n    '}':        colors.yellow,\n    '[':        colors.yellow,\n    ']':        colors.yellow,\n    ':':        colors.yellow,\n    ';':        colors.yellow\n};\n\nfunction getTokenType([type, value], processor) {\n    if ( type === 'word' ) {\n        if ( value[0] === '.' ) {\n            return 'class';\n        }\n        if ( value[0] === '#' ) {\n            return 'hash';\n        }\n    }\n\n    if ( !processor.endOfFile() ) {\n        let next = processor.nextToken();\n        processor.back(next);\n        if ( next[0] === 'brackets' || next[0] === '(' ) return 'call';\n    }\n\n    return type;\n}\n\nfunction terminalHighlight(css) {\n    let processor = tokenizer(new Input(css), { ignoreErrors: true });\n    let result = '';\n    while ( !processor.endOfFile() ) {\n        let token = processor.nextToken();\n        let color = HIGHLIGHT_THEME[getTokenType(token, processor)];\n        if ( color ) {\n            result += token[1].split(/\\r?\\n/)\n              .map( i => color(i) )\n              .join('\\n');\n        } else {\n            result += token[1];\n        }\n    }\n    return result;\n}\n\nexport default terminalHighlight;\n"]},"metadata":{},"sourceType":"script"}