{"ast":null,"code":"'use strict';\n\nvar through = require('through2');\n\nvar processCss = require('./process-css');\n\nvar options = require('./options');\n\nmodule.exports = function (fileName, opts) {\n  opts = options.normalize(opts);\n  if (options.skipIt(fileName, opts)) return through();\n  var chunks = [];\n  return through(function (chunk, enc, next) {\n    chunks.push(chunk);\n    next();\n  }, function (done) {\n    var buffer = Buffer.concat(chunks);\n    var source = buffer.toString('utf-8');\n    processCss(fileName, source, opts).then(function (moduleSource) {\n      this.push(moduleSource);\n      done();\n    }.bind(this)).catch(done);\n  });\n};","map":{"version":3,"sources":["/Users/George/Documents/billy/node_modules/cssify/lib/index.js"],"names":["through","require","processCss","options","module","exports","fileName","opts","normalize","skipIt","chunks","chunk","enc","next","push","done","buffer","Buffer","concat","source","toString","then","moduleSource","bind","catch"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAAxB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,WAAD,CAArB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,QAAV,EAAoBC,IAApB,EAA0B;AACzCA,EAAAA,IAAI,GAAGJ,OAAO,CAACK,SAAR,CAAkBD,IAAlB,CAAP;AAEA,MAAIJ,OAAO,CAACM,MAAR,CAAeH,QAAf,EAAyBC,IAAzB,CAAJ,EAAoC,OAAOP,OAAO,EAAd;AAEpC,MAAIU,MAAM,GAAG,EAAb;AAEA,SAAOV,OAAO,CACZ,UAAUW,KAAV,EAAiBC,GAAjB,EAAsBC,IAAtB,EAA4B;AAC1BH,IAAAA,MAAM,CAACI,IAAP,CAAYH,KAAZ;AACAE,IAAAA,IAAI;AACL,GAJW,EAKZ,UAAUE,IAAV,EAAgB;AACd,QAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAcR,MAAd,CAAb;AACA,QAAIS,MAAM,GAAGH,MAAM,CAACI,QAAP,CAAgB,OAAhB,CAAb;AAEAlB,IAAAA,UAAU,CAACI,QAAD,EAAWa,MAAX,EAAmBZ,IAAnB,CAAV,CAAmCc,IAAnC,CAAwC,UAAUC,YAAV,EAAwB;AAC9D,WAAKR,IAAL,CAAUQ,YAAV;AACAP,MAAAA,IAAI;AACL,KAHuC,CAGtCQ,IAHsC,CAGjC,IAHiC,CAAxC,EAICC,KAJD,CAIOT,IAJP;AAKD,GAdW,CAAd;AAgBD,CAvBD","sourcesContent":["'use strict'\n\nvar through = require('through2')\nvar processCss = require('./process-css')\nvar options = require('./options')\n\nmodule.exports = function (fileName, opts) {\n  opts = options.normalize(opts)\n\n  if (options.skipIt(fileName, opts)) return through()\n\n  var chunks = []\n\n  return through(\n    function (chunk, enc, next) {\n      chunks.push(chunk)\n      next()\n    },\n    function (done) {\n      var buffer = Buffer.concat(chunks)\n      var source = buffer.toString('utf-8')\n\n      processCss(fileName, source, opts).then(function (moduleSource) {\n        this.push(moduleSource)\n        done()\n      }.bind(this))\n      .catch(done)\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"script"}