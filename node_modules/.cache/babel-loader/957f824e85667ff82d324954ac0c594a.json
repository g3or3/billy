{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar Core = require('css-modules-loader-core');\n\nvar stringHash = require('string-hash');\n\nvar stringifyObject = require('stringify-object');\n\nfunction escapeCss(css) {\n  return JSON.stringify(css);\n}\n\nfunction hash(str) {\n  return '_' + stringHash(str).toString(36);\n}\n\nfunction generateHashName(styleName, fileName) {\n  return hash(fileName + ':' + styleName);\n}\n\nfunction generateDebugName(styleName, fileName) {\n  var sanitisedPath = fileName.replace(/\\.[^\\.\\/\\\\]+$/, '').replace(/[\\W_]+/g, '_').replace(/^_|_$/g, '');\n  return '_' + sanitisedPath + '__' + styleName;\n}\n\nfunction wrapCss(fileName, css, options, map) {\n  var escapedCss = escapeCss(css);\n  var stringifiedMap = stringifyObject(map);\n  var packagePath = path.join(__dirname, '..');\n  var dirName = path.dirname(fileName);\n  var requirePath = path.relative(dirName, packagePath); // On Windows, path.relative returns unescaped backslashes and\n  // that causes cssify to not be findable.\n\n  requirePath = requirePath.replace(/\\\\/g, '/');\n  var moduleSource = options['auto-inject'] ? ['var inject = require(\\'./' + requirePath + '\\');', 'var css = ' + escapedCss + ';', 'inject(css, undefined, \\'' + hash(fileName) + '\\');', options.modules ? 'module.exports = ' + stringifiedMap + ';' : 'module.exports = css;'].join('\\n') + '\\n' : options.modules ? 'module.exports = { css: ' + escapedCss + ', map: ' + stringifiedMap + ' };\\n' : 'module.exports = ' + escapedCss + ';\\n';\n  return moduleSource;\n}\n\nfunction processCss(fileName, source, options) {\n  if (options.modules) {\n    Core.scope.generateScopedName = options.debug ? generateDebugName : generateHashName;\n    var core = new Core();\n    return core.load(source, path.relative(process.cwd(), fileName)).then(function (result) {\n      return wrapCss(fileName, result.injectableSource, options, result.exportTokens);\n    });\n  }\n\n  return Promise.resolve(wrapCss(fileName, source, options));\n}\n\nmodule.exports = processCss;","map":{"version":3,"sources":["/Users/George/Documents/billy/node_modules/cssify/lib/process-css.js"],"names":["path","require","Core","stringHash","stringifyObject","escapeCss","css","JSON","stringify","hash","str","toString","generateHashName","styleName","fileName","generateDebugName","sanitisedPath","replace","wrapCss","options","map","escapedCss","stringifiedMap","packagePath","join","__dirname","dirName","dirname","requirePath","relative","moduleSource","modules","processCss","source","scope","generateScopedName","debug","core","load","process","cwd","then","result","injectableSource","exportTokens","Promise","resolve","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar path = require('path')\nvar Core = require('css-modules-loader-core')\nvar stringHash = require('string-hash')\nvar stringifyObject = require('stringify-object')\n\nfunction escapeCss (css) {\n  return JSON.stringify(css)\n}\n\nfunction hash (str) {\n  return '_' + stringHash(str).toString(36)\n}\n\nfunction generateHashName (styleName, fileName) {\n  return hash(fileName + ':' + styleName)\n}\n\nfunction generateDebugName (styleName, fileName) {\n  var sanitisedPath = fileName\n    .replace(/\\.[^\\.\\/\\\\]+$/, '')\n    .replace(/[\\W_]+/g, '_')\n    .replace(/^_|_$/g, '')\n\n  return '_' + sanitisedPath + '__' + styleName\n}\n\nfunction wrapCss (fileName, css, options, map) {\n  var escapedCss = escapeCss(css)\n  var stringifiedMap = stringifyObject(map)\n  var packagePath = path.join(__dirname, '..')\n  var dirName = path.dirname(fileName)\n  var requirePath = path.relative(dirName, packagePath)\n\n  // On Windows, path.relative returns unescaped backslashes and\n  // that causes cssify to not be findable.\n  requirePath = requirePath.replace(/\\\\/g, '/')\n\n  var moduleSource = options['auto-inject']\n    ? [\n      'var inject = require(\\'./' + requirePath + '\\');',\n      'var css = ' + escapedCss + ';',\n      'inject(css, undefined, \\'' + hash(fileName) + '\\');',\n      options.modules\n        ? 'module.exports = ' + stringifiedMap + ';'\n        : 'module.exports = css;'\n    ].join('\\n') + '\\n'\n    : options.modules\n      ? 'module.exports = { css: ' + escapedCss + ', map: ' + stringifiedMap + ' };\\n'\n      : 'module.exports = ' + escapedCss + ';\\n'\n\n  return moduleSource\n}\n\nfunction processCss (fileName, source, options) {\n  if (options.modules) {\n    Core.scope.generateScopedName = options.debug\n      ? generateDebugName\n      : generateHashName\n\n    var core = new Core()\n\n    return core.load(source, path.relative(process.cwd(), fileName))\n      .then(function (result) {\n        return wrapCss(\n          fileName,\n          result.injectableSource,\n          options,\n          result.exportTokens\n        )\n      })\n  }\n\n  return Promise.resolve(wrapCss(fileName, source, options))\n}\n\nmodule.exports = processCss\n"]},"metadata":{},"sourceType":"script"}